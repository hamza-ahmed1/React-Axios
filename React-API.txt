
Fetch Function :
In javascript fetch() is used to get data from API
This function requires only one paramenter and then return the promise
FAKE API:'https://jsonplaceholder.typicode.com/posts'

CODE:
function ReactApi() {
    const [posts,setpost]=useState([]);
    useEffect(()=>{
      fetch("https://jsonplaceholder.typicode.com/posts").then((response)=>{
        response.json().then((result)=>{
            setpost(result);
            
         
    
        })
      });
    })
    return (
        <>
       <div>
        <ul>
            {
                posts.map((psts,key)=>{
                    return (
                        <>
                        <li>{psts.id}</li>
                        <li>{psts.title}</li>
                        </>

                    )
                })
            }
        </ul>
       </div>
        </>
    );
  }
  
  export default ReactApi;

--------AXIOS In react JS-------
in react js axios is a library that serve HTTP requests:
it is based on $http service with in angular.js v1
it is similer to javascript fetch() function
Axios is promised based give async and await functionality
give us client site protection from cross site request forgery token
it returns data in JSON format


-----GET AXIOS-----
CODE:

const url="https://jsonplaceholder.typicode.com/posts";
export default function GetAxios() {
    const [posts,setposts]=useState([]);
    useEffect(()=>{
        Axios.get(url).then((response)=>{
                setposts(response.data);
        })
    },[])
  return (
    
    <>
{
                posts.map((psts)=>{
                        const {id,title,body}=psts;
                    return (
                        <>
                        <ul key={id}>
                            <li>{id}</li>
                            <li>{title}</li>
                            <li>{body}</li>

                        </ul>
                    
                        </>

                    )
                })
 }
    </>

  )
}
--------POST AXIOS------
CODE:
export default function PostAxios() {
    const[my_title,settitle]=useState("");
    const[my_body,setbody]=useState("");
    const Handlesubmit=(event)=>{
        event.preventDefault();
        // console.log(my_title);
        // console.log(my_body);
        Axios.post("https://jsonplaceholder.typicode.com/post",{
            title:my_title,
            body:my_body
        }).then((response)=>{
            console.log(response);
        }).catch((error)=>{
            console.log(error);
        })

    }
  return (
    <>
    <div className='App'>PostAxios</div>
    <br/>

    <form className='App' onSubmit={Handlesubmit}>
        <label>Enter Title &nbsp;</label>
        <input type='text' value={my_title} onChange={(e)=>{settitle(e.target.value)}}/>
        <br/>
        <label>Enter Body &nbsp;</label>
        <input type='text' value={my_body} onChange={(e)=>{setbody(e.target.value)}}/>
        <br/>
        <br/>
        <input type='submit' value={'submit'}/>
    </form>

    </>
  )
}









-----------------------Introduction To React Redux----------
it is used for javascript apps
it is state container 
it is predictible
Redux is not connect with only React ,can be used with vanilla javascript,
angular and vue.js

--it stores states of our application
In react state refer to individual component but in react redux it stores
whole app's state
-predictible means it can change the states
In redux all state changes are explicitly and it is easy to keep record them

Why use React Redux?
avoid prop drilling
but we can use useCotext() Hook for that?
Yes but React Redux reduce complexity of that work

React(UI Library)----React Redux-----Redux(state managment library)


---------------Three Core Concept of React Redux----
Store-->Holds the state of your app
Action-->Describe the type of change in the state like,inc or dec
Reducer()-->does the transition of state depending upon Action
Reducers take Prev/cur state and Action then return the new state
We can create multiple Reducers but have to register all reducer in single 
root reducer
we have only single Redux store in our applcation

---------------3 Principle and Dataflow of Redux-------
1st Principle :Single Source of Truth
The state of your application must stored in single redux store

2nd Princple :State is readonly (immutable)
only way to update or change your state is by Action

3rd Principle :Changes are made with pure Reducers
Reducer(cur_state,Action)-->New State

----------->>>>Dataflow
            subscribe               Dispatch
            ^---------Application-------------                                |
            ^                                |
            |                                |
            |                Reducer<<Action<<                            
 Redux Store<<<---------------|
